// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Turnierplan.Dal;

#nullable disable

namespace Turnierplan.Dal.Migrations
{
    [DbContext(typeof(TurnierplanContext))]
    partial class TurnierplanContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Turnierplan.Core.ApiKey.ApiKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("ApiKeys", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.ApiKey.ApiKeyRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiKeyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.HasIndex("Timestamp");

                    b.ToTable("ApiKeyRequests", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Document.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Configuration")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GenerationCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastGeneration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("TournamentId");

                    b.ToTable("Documents", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Folder.Folder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Folders", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Image.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ResourceIdentifier")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("ResourceIdentifier")
                        .IsUnique();

                    b.ToTable("Images", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Organization.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Organizations", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.ApiKey.ApiKey>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("ApiKeyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApiKeyId");

                    b.ToTable("IAM_ApiKey", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Folder.Folder>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("IAM_Folder", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Image.Image>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("IAM_Image", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Organization.Organization>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("IAM_Organization", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Tournament.Tournament>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("IAM_Tournament", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Venue.Venue>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Principal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<long>("VenueId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("IAM_Venue", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Group", b =>
                {
                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<char>("AlphabeticalId")
                        .HasColumnType("character(1)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.HasKey("TournamentId", "Id");

                    b.ToTable("Groups", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.GroupParticipant", b =>
                {
                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("TournamentId", "GroupId", "TeamId");

                    b.HasIndex("TournamentId", "TeamId");

                    b.ToTable("GroupParticipants", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Match", b =>
                {
                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<short>("Court")
                        .HasColumnType("smallint");

                    b.Property<int?>("FinalsRound")
                        .HasColumnType("integer");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsCurrentlyPlaying")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Kickoff")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OutcomeType")
                        .HasColumnType("integer");

                    b.Property<int?>("PlayoffPosition")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreA")
                        .HasColumnType("integer");

                    b.Property<int?>("ScoreB")
                        .HasColumnType("integer");

                    b.Property<string>("TeamSelectorA")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("TeamSelectorB")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("TournamentId", "Id");

                    b.HasIndex("TournamentId", "GroupId");

                    b.ToTable("Matches", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Team", b =>
                {
                    b.Property<long>("TournamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EntryFeePaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<bool>("OutOfCompetition")
                        .HasColumnType("boolean");

                    b.HasKey("TournamentId", "Id");

                    b.ToTable("Teams", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Tournament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMigrated")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizerLogoId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.Property<int>("PublicPageViews")
                        .HasColumnType("integer");

                    b.Property<long?>("SponsorBannerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SponsorLogoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VenueId")
                        .HasColumnType("bigint");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizerLogoId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("SponsorBannerId");

                    b.HasIndex("SponsorLogoId");

                    b.HasIndex("VenueId");

                    b.ToTable("Tournaments", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastPasswordChange")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NormalizedEMail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SecurityStamp")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEMail")
                        .IsUnique();

                    b.ToTable("Users", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.Venue.Venue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.PrimitiveCollection<List<string>>("AddressDetails")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.PrimitiveCollection<List<string>>("ExternalLinks")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("PublicId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Venues", "turnierplan");
                });

            modelBuilder.Entity("Turnierplan.Core.ApiKey.ApiKey", b =>
                {
                    b.HasOne("Turnierplan.Core.Organization.Organization", "Organization")
                        .WithMany("ApiKeys")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Turnierplan.Core.ApiKey.ApiKeyRequest", b =>
                {
                    b.HasOne("Turnierplan.Core.ApiKey.ApiKey", "ApiKey")
                        .WithMany("Requests")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("Turnierplan.Core.Document.Document", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Tournament", "Tournament")
                        .WithMany("Documents")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Turnierplan.Core.Folder.Folder", b =>
                {
                    b.HasOne("Turnierplan.Core.Organization.Organization", "Organization")
                        .WithMany("Folders")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Turnierplan.Core.Image.Image", b =>
                {
                    b.HasOne("Turnierplan.Core.Organization.Organization", "Organization")
                        .WithMany("Images")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.ApiKey.ApiKey>", b =>
                {
                    b.HasOne("Turnierplan.Core.ApiKey.ApiKey", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("ApiKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Folder.Folder>", b =>
                {
                    b.HasOne("Turnierplan.Core.Folder.Folder", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Image.Image>", b =>
                {
                    b.HasOne("Turnierplan.Core.Image.Image", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Organization.Organization>", b =>
                {
                    b.HasOne("Turnierplan.Core.Organization.Organization", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Tournament.Tournament>", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Tournament", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.RoleAssignment.RoleAssignment<Turnierplan.Core.Venue.Venue>", b =>
                {
                    b.HasOne("Turnierplan.Core.Venue.Venue", "Scope")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scope");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Group", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Tournament", null)
                        .WithMany("Groups")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.GroupParticipant", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Group", "Group")
                        .WithMany("Participants")
                        .HasForeignKey("TournamentId", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierplan.Core.Tournament.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TournamentId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Match", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Tournament", null)
                        .WithMany("Matches")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Turnierplan.Core.Tournament.Group", "Group")
                        .WithMany()
                        .HasForeignKey("TournamentId", "GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Team", b =>
                {
                    b.HasOne("Turnierplan.Core.Tournament.Tournament", null)
                        .WithMany("Teams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Tournament", b =>
                {
                    b.HasOne("Turnierplan.Core.Folder.Folder", "Folder")
                        .WithMany("Tournaments")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Turnierplan.Core.Organization.Organization", "Organization")
                        .WithMany("Tournaments")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Turnierplan.Core.Image.Image", "OrganizerLogo")
                        .WithMany()
                        .HasForeignKey("OrganizerLogoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Turnierplan.Core.Image.Image", "SponsorBanner")
                        .WithMany()
                        .HasForeignKey("SponsorBannerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Turnierplan.Core.Image.Image", "SponsorLogo")
                        .WithMany()
                        .HasForeignKey("SponsorLogoId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Turnierplan.Core.Venue.Venue", "Venue")
                        .WithMany("Tournaments")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Turnierplan.Core.Tournament.ComputationConfiguration", "ComputationConfiguration", b1 =>
                        {
                            b1.Property<long>("TournamentId")
                                .HasColumnType("bigint");

                            b1.PrimitiveCollection<int[]>("ComparisonModes")
                                .IsRequired()
                                .HasColumnType("integer[]")
                                .HasAnnotation("Relational:JsonPropertyName", "cmp");

                            b1.Property<bool>("HigherScoreLoses")
                                .HasColumnType("boolean")
                                .HasAnnotation("Relational:JsonPropertyName", "r");

                            b1.Property<int>("MatchDrawnPoints")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "d");

                            b1.Property<int>("MatchLostPoints")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "l");

                            b1.Property<int>("MatchWonPoints")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "w");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments", "turnierplan");

                            b1.ToJson("ComputationConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");
                        });

                    b.OwnsOne("Turnierplan.Core.Tournament.MatchPlanConfiguration", "MatchPlanConfiguration", b1 =>
                        {
                            b1.Property<long>("TournamentId")
                                .HasColumnType("bigint");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments", "turnierplan");

                            b1.ToJson("MatchPlanConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");

                            b1.OwnsOne("Turnierplan.Core.Tournament.FinalsRoundConfig", "FinalsRoundConfig", b2 =>
                                {
                                    b2.Property<long>("MatchPlanConfigurationTournamentId")
                                        .HasColumnType("bigint");

                                    b2.Property<bool>("EnableThirdPlacePlayoff")
                                        .HasColumnType("boolean")
                                        .HasAnnotation("Relational:JsonPropertyName", "3rd");

                                    b2.Property<int>("FirstFinalsRoundOrder")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "fo");

                                    b2.PrimitiveCollection<List<string>>("TeamSelectors")
                                        .HasColumnType("text[]")
                                        .HasAnnotation("Relational:JsonPropertyName", "ts");

                                    b2.HasKey("MatchPlanConfigurationTournamentId");

                                    b2.ToTable("Tournaments", "turnierplan");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "fr");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchPlanConfigurationTournamentId");

                                    b2.OwnsMany("Turnierplan.Core.Tournament.AdditionalPlayoffConfig", "AdditionalPlayoffs", b3 =>
                                        {
                                            b3.Property<long>("FinalsRoundConfigMatchPlanConfigurationTournamentId")
                                                .HasColumnType("bigint");

                                            b3.Property<int>("__synthesizedOrdinal")
                                                .ValueGeneratedOnAdd()
                                                .HasColumnType("integer");

                                            b3.Property<int>("PlayoffPosition")
                                                .HasColumnType("integer")
                                                .HasAnnotation("Relational:JsonPropertyName", "p");

                                            b3.Property<string>("TeamSelectorA")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "a");

                                            b3.Property<string>("TeamSelectorB")
                                                .IsRequired()
                                                .HasColumnType("text")
                                                .HasAnnotation("Relational:JsonPropertyName", "b");

                                            b3.HasKey("FinalsRoundConfigMatchPlanConfigurationTournamentId", "__synthesizedOrdinal");

                                            b3.ToTable("Tournaments", "turnierplan");

                                            b3.HasAnnotation("Relational:JsonPropertyName", "ap");

                                            b3.WithOwner()
                                                .HasForeignKey("FinalsRoundConfigMatchPlanConfigurationTournamentId");
                                        });

                                    b2.Navigation("AdditionalPlayoffs");
                                });

                            b1.OwnsOne("Turnierplan.Core.Tournament.GroupRoundConfig", "GroupRoundConfig", b2 =>
                                {
                                    b2.Property<long>("MatchPlanConfigurationTournamentId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("GroupMatchOrder")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "o");

                                    b2.Property<int>("GroupPhaseRounds")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "r");

                                    b2.HasKey("MatchPlanConfigurationTournamentId");

                                    b2.ToTable("Tournaments", "turnierplan");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "gr");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchPlanConfigurationTournamentId");
                                });

                            b1.OwnsOne("Turnierplan.Core.Tournament.ScheduleConfig", "ScheduleConfig", b2 =>
                                {
                                    b2.Property<long>("MatchPlanConfigurationTournamentId")
                                        .HasColumnType("bigint");

                                    b2.Property<short>("FinalsPhaseNumberOfCourts")
                                        .HasColumnType("smallint")
                                        .HasAnnotation("Relational:JsonPropertyName", "fc");

                                    b2.Property<TimeSpan>("FinalsPhasePauseTime")
                                        .HasColumnType("interval")
                                        .HasAnnotation("Relational:JsonPropertyName", "fp");

                                    b2.Property<TimeSpan>("FinalsPhasePlayTime")
                                        .HasColumnType("interval")
                                        .HasAnnotation("Relational:JsonPropertyName", "fd");

                                    b2.Property<DateTime>("FirstMatchKickoff")
                                        .HasColumnType("timestamp with time zone")
                                        .HasAnnotation("Relational:JsonPropertyName", "f");

                                    b2.Property<short>("GroupPhaseNumberOfCourts")
                                        .HasColumnType("smallint")
                                        .HasAnnotation("Relational:JsonPropertyName", "gc");

                                    b2.Property<TimeSpan>("GroupPhasePauseTime")
                                        .HasColumnType("interval")
                                        .HasAnnotation("Relational:JsonPropertyName", "gp");

                                    b2.Property<TimeSpan>("GroupPhasePlayTime")
                                        .HasColumnType("interval")
                                        .HasAnnotation("Relational:JsonPropertyName", "gd");

                                    b2.Property<TimeSpan>("PauseBetweenGroupAndFinalsPhase")
                                        .HasColumnType("interval")
                                        .HasAnnotation("Relational:JsonPropertyName", "p");

                                    b2.HasKey("MatchPlanConfigurationTournamentId");

                                    b2.ToTable("Tournaments", "turnierplan");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "sc");

                                    b2.WithOwner()
                                        .HasForeignKey("MatchPlanConfigurationTournamentId");
                                });

                            b1.Navigation("FinalsRoundConfig");

                            b1.Navigation("GroupRoundConfig");

                            b1.Navigation("ScheduleConfig");
                        });

                    b.OwnsOne("Turnierplan.Core.Tournament.PresentationConfiguration", "PresentationConfiguration", b1 =>
                        {
                            b1.Property<long>("TournamentId")
                                .HasColumnType("bigint");

                            b1.Property<bool>("ShowOrganizerLogo")
                                .HasColumnType("boolean")
                                .HasAnnotation("Relational:JsonPropertyName", "ol");

                            b1.Property<int>("ShowResults")
                                .HasColumnType("integer")
                                .HasAnnotation("Relational:JsonPropertyName", "o");

                            b1.Property<bool>("ShowSponsorLogo")
                                .HasColumnType("boolean")
                                .HasAnnotation("Relational:JsonPropertyName", "sl");

                            b1.HasKey("TournamentId");

                            b1.ToTable("Tournaments", "turnierplan");

                            b1.ToJson("PresentationConfiguration");

                            b1.WithOwner()
                                .HasForeignKey("TournamentId");

                            b1.OwnsOne("Turnierplan.Core.Tournament.PresentationConfiguration+HeaderLine", "Header1", b2 =>
                                {
                                    b2.Property<long>("PresentationConfigurationTournamentId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Content")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "c");

                                    b2.Property<string>("CustomContent")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "cc");

                                    b2.HasKey("PresentationConfigurationTournamentId");

                                    b2.ToTable("Tournaments", "turnierplan");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "h1");

                                    b2.WithOwner()
                                        .HasForeignKey("PresentationConfigurationTournamentId");
                                });

                            b1.OwnsOne("Turnierplan.Core.Tournament.PresentationConfiguration+HeaderLine", "Header2", b2 =>
                                {
                                    b2.Property<long>("PresentationConfigurationTournamentId")
                                        .HasColumnType("bigint");

                                    b2.Property<int>("Content")
                                        .HasColumnType("integer")
                                        .HasAnnotation("Relational:JsonPropertyName", "c");

                                    b2.Property<string>("CustomContent")
                                        .HasColumnType("text")
                                        .HasAnnotation("Relational:JsonPropertyName", "cc");

                                    b2.HasKey("PresentationConfigurationTournamentId");

                                    b2.ToTable("Tournaments", "turnierplan");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "h2");

                                    b2.WithOwner()
                                        .HasForeignKey("PresentationConfigurationTournamentId");
                                });

                            b1.Navigation("Header1")
                                .IsRequired();

                            b1.Navigation("Header2")
                                .IsRequired();
                        });

                    b.Navigation("ComputationConfiguration")
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("MatchPlanConfiguration");

                    b.Navigation("Organization");

                    b.Navigation("OrganizerLogo");

                    b.Navigation("PresentationConfiguration")
                        .IsRequired();

                    b.Navigation("SponsorBanner");

                    b.Navigation("SponsorLogo");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("Turnierplan.Core.Venue.Venue", b =>
                {
                    b.HasOne("Turnierplan.Core.Organization.Organization", "Organization")
                        .WithMany("Venues")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Turnierplan.Core.ApiKey.ApiKey", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("Turnierplan.Core.Folder.Folder", b =>
                {
                    b.Navigation("RoleAssignments");

                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Turnierplan.Core.Image.Image", b =>
                {
                    b.Navigation("RoleAssignments");
                });

            modelBuilder.Entity("Turnierplan.Core.Organization.Organization", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Folders");

                    b.Navigation("Images");

                    b.Navigation("RoleAssignments");

                    b.Navigation("Tournaments");

                    b.Navigation("Venues");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Group", b =>
                {
                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Turnierplan.Core.Tournament.Tournament", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Groups");

                    b.Navigation("Matches");

                    b.Navigation("RoleAssignments");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Turnierplan.Core.Venue.Venue", b =>
                {
                    b.Navigation("RoleAssignments");

                    b.Navigation("Tournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
